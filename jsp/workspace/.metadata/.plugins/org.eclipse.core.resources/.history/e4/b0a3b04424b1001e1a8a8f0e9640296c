package com.sa.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.websocket.Session;

import com.sa.apply.model.ApplyVO;
import com.sa.apply.model.OptionVO;
import com.sa.apply.model.SeatVO;
import com.sa.apply.service.ApplyService;
import com.sa.apply.service.ApplyServiceImpl;

/**
 * Servlet implementation class ApplyController
 */
@WebServlet("*.apply")
public class ApplyController extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
	ApplyService service = new ApplyServiceImpl();
	
    public ApplyController() {
        super();
        


    }
   

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doAction(request, response);
	}

	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doAction(request, response);
	}
	
	protected void doAction(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		request.setCharacterEncoding("utf-8");	
		
		String uri = request.getRequestURI();
		String path = uri.substring(request.getContextPath().length());
		
		
		System.out.println(path);
		if(path.equals("/apply/list.apply")) {
			//////////////////////////유저세션 테스트용
			HttpSession session = request.getSession();
			session.setAttribute("user_id", "USER6");
			//////////////////////////////////////
			
			ArrayList<OptionVO> ovo = service.getOption(request, response);
			
			
			
			
			
			request.setAttribute("ovo", ovo);
			request.getRequestDispatcher("apply_list.jsp").forward(request, response);
			
			
			
			
		}else if(path.equals("/apply/join.apply")) {
			System.out.println("입장");
			 HttpSession session = request.getSession();
			 String userid = (String)session.getAttribute("user_id");
			 
			ArrayList<String> applyUesr = service.getRoomNumApply(request, response);
			for(String s : applyUesr ) {
				if(s.equals(userid)) {
					//response.sendRedirect("apply_waittingRoom.jsp?roomnumber="+request.getParameter("roomnumber"));
					
					//if iswin == y이면 버튼생김(테스트용)
					 ArrayList<ApplyVO> iswinList = service.getIsWin(request, response);
					 request.setAttribute("iswinList", iswinList);
					 request.getRequestDispatcher("apply_waittingRoom.jsp").forward(request, response);
				}else {
					response.setContentType("text/html; charset=UTF-8");
					 PrintWriter out = response.getWriter();
					 out.println("<script>");
					 out.println("alert('넌아님이방 신청자 아님 .');");
					 out.println("location.href='list.apply'; ");
					 out.println("</script>");
				}
			}
			//유저가 꽉차면
			if(service.getRoomNumApply(request, response).size() >= service.getNumCount(request, response)) {
				int result = service.allUserUpdateWin(request, response);
				System.out.println(result + "업데이트완료");
			}
			
			
		}
		
		else if( path.equals("/apply/applyUser.apply")) {
			System.out.println("wattingRoom.apply 도착완료");
			//신청정보 get
			 ArrayList<ApplyVO> getApplyList = service.getApply(request, response);
			 
			 //세션있어야한다.
			 HttpSession session = request.getSession();
			 String userid = (String)session.getAttribute("user_id");
			 System.out.println(userid);
			 
			 
			 boolean isuser = false;
			 for(ApplyVO a :getApplyList) {
				 //방인원 꽉차면 못들어가게(신청못하게)
				 if(service.getRoomNumApply(request, response).size() >= service.getNumCount(request, response)) {
					 
				 }else {
					 if(a.getUserid().equals(userid)) {
						 isuser = true;
					 }
				 }
				 
			 }
			 if(!isuser) {
				//유저 신청
				 service.insertApply(request, response); 
			 }
		


			 //방인원 꽉차면 첫번째 참가자 랜덤로직 실행
			 //일단 보류
			 //System.out.println(service.getNumCount(request, response));
			// System.out.println(userid.equals("USER6"));
			// if( service.getNumCount(request, response) == 5 && userid.equals("USER6")) {
			//	 service.startRandomSeat(request, response);
			// } 
			
			
		}else if(path.equals("/apply/selectseat.apply")) {
		
			 
			 
			ArrayList<String> closeSeat = service.getSeat(request, response);
			ArrayList<String> seatWH = service.getOptionWH(request, response);
			
			
			request.setAttribute("closeSeat", closeSeat);
			request.setAttribute("seatWH", seatWH);
			
			request.getRequestDispatcher("apply_selectSeat.jsp").forward(request, response);
		
		}else if(path.equals("/apply/seatApply.apply")){
			
			//유저를 기준으로 조회해서 없으면
			int userSelectSeat = service.getUserSelectSeat(request, response);
			int userSeat = service.getUserSeat(request, response);
			System.out.println(userSelectSeat);
			System.out.println(userSeat);
			
			//seat테이블 좌석이랑 apply테이블 유저가 선택한 자석이 없으면 
			//좌석 선태가능
			if(userSelectSeat == 0 && userSeat == 0) {
				service.seatInsert(request, response);
				service.applySeatUpdate(request, response);
				request.getRequestDispatcher("resultPage.apply?roomnumber="+request.getParameter("roomnumber")).forward(request, response);
			}else {
				request.setAttribute("msg", "이미 신청한 좌석입니다.");
				request.getRequestDispatcher("selectseat.apply").forward(request, response);
				
			}
			
		} else if(path.equals("/apply/resultPage.apply")){
			ArrayList<String> closeSeat = service.getSeat(request, response);
			ArrayList<String> seatWH = service.getOptionWH(request, response);
			request.setAttribute("closeSeat", closeSeat);
			request.setAttribute("seatWH", seatWH);
			request.getRequestDispatcher("apply_resultPage.jsp").forward(request, response);
		}
		
		
	}

}
