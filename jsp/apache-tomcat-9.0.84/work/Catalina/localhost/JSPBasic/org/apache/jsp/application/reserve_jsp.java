/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.84
 * Generated at: 2024-01-08 08:18:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.application;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;

public final class reserve_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");


	if(session.getAttribute("isAuth") == null){
		response.sendRedirect("auth.jsp");
	}

//app에 list가 있다면, 가져옵니다
	ArrayList<String> list = new ArrayList<>();
	if(application.getAttribute("list") != null){
		list = (ArrayList<String>)application.getAttribute("list");
	}
	

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<!-- \r\n");
      out.write("		checkbox, radio버튼 선택을 못하도록 하는 옵션 disabled\r\n");
      out.write("		checkbox, radio버튼 미리 선택하는 옵션 checked\r\n");
      out.write("		select박스의 미리 값을 선택하는 옵션 selected\r\n");
      out.write("		input태그를 읽기전용 readonly \r\n");
      out.write("		input태그의 값을 반드시 지정 required\r\n");
      out.write("	 -->	\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div style = \"text-align: center;\">\r\n");
      out.write("		<h3>영화 좌석 예약</h3>\r\n");
      out.write("		<h4>예약할 죄석을 체크한 후 예약 버튼을 클릭하세요.</h4>\r\n");
      out.write("	\r\n");
      out.write("	<hr>\r\n");
      out.write("	\r\n");
      out.write("	<b>좌석배치도</b>\r\n");
      out.write("	<br>\r\n");
      out.write("	<form action=\"reserve_ok.jsp\" method=\"post\">\r\n");
      out.write("	&nbsp;&nbsp;&nbsp;\r\n");
      out.write("	");
for(char c = 'A'; c <= 'Z'; c++) {
      out.write("\r\n");
      out.write("		<small>");
      out.print( c);
      out.write("</small>\r\n");
      out.write("		&nbsp;\r\n");
      out.write("	");
}
      out.write(" <br>\r\n");
      out.write("	");
for(int i = 1; i <= 6; i++) {
      out.write("\r\n");
      out.write("		");
      out.print( i );
      out.write("\r\n");
      out.write("		");
for(char c = 'A'; c <= 'Z'; c++) {
      out.write("\r\n");
      out.write("			<input type=\"checkbox\" name = \"seat\" value = \"");
      out.print(i);
      out.write('-');
      out.print(c);
      out.write('"');
      out.write(' ');
      out.print(list.contains(i + "-" + c) ? "disabled" : "");
      out.write("/>\r\n");
      out.write("		");
}
      out.write("\r\n");
      out.write("		<br>\r\n");
      out.write("		");
 if( i == 3) {
      out.write("\r\n");
      out.write("			<br>\r\n");
      out.write("		");
} 
      out.write('\r');
      out.write('\n');
      out.write('	');
}
      out.write("\r\n");
      out.write("	<br>\r\n");
      out.write("	<input type = \"submit\" value=\"예약하기\"/>\r\n");
      out.write("	<input type = \"reset\" value=\"다시 선택하기\"/>\r\n");
      out.write("	</form>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
