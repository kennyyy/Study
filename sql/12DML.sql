--INSERT의 2가지 문법
-- 테이블 구조를 빠르게 확인하는 방법

DESC DEPARTMENTS;

SELECT * FROM DEPARTMENTS;
--1ST (컬럼을 정확하게 일치시키는 경우는 컬럼명 생략이 가능)
INSERT INTO DEPARTMENTS VALUES (280, '개발자', NULL, 1700);

--DML문은 트랜잭션이 항상 적용됩니다.
ROLLBACK;

--2DN (컬럼을 지칭해서 넣는 경우)
INSERT INTO DEPARTMENTS(DEPARTMENT_ID, DEPARTMENT_NAME, LOCATION_ID) VALUES(280, '개발자', 1700);

INSERT INTO DEPARTMENTS VALUES (290, '디자이너', NULL, 1700);
INSERT INTO DEPARTMENTS VALUES (300, 'DB관리자', NULL, 1800);
INSERT INTO DEPARTMENTS VALUES (310, '데이터분석가', NULL, 1800);
INSERT INTO DEPARTMENTS VALUES (320, '퍼블리셔', 200, 1800);
INSERT INTO DEPARTMENTS VALUES (330, '서버관리자', 200, 1800);

--INSERT문도 서브쿼리가 사용됩니다.
--실습을 위한 가짜테이블 생성
CREATE TABLE EMPS AS (SELECT * FROM EMPLOYEES WHERE 1 = 2); --구조만 복사하는 테이블생성
SELECT * FROM EMPS;
DESC EMPS;

--1ST
--모든 컬럼을 서브쿼리 절로 넣을때
INSERT INTO EMPS(SELECT * FROM EMPLOYEES WHERE JOB_ID LIKE '%MAN');

ROLLBACK;
--특정 컬럼을 서브쿼리 절로 넣을때
INSERT INTO EMPS(LAST_NAME, EMAIL, HIRE_DATE, JOB_ID)(SELECT LAST_NAME, EMAIL, HIRE_DATE, JOB_ID FROM EMPLOYEES WHERE JOB_ID LIKE '%MAN');
--2ND
--단일값이면 서브쿼리로 각각 넣기 가능
INSERT INTO EMPS(LAST_NAME, EMAIL, HIRE_DATE, JOB_ID) VALUES ((SELECT LAST_NAME FROM EMPLOYEES WHERE MANAGER_ID IS NULL), 'TEST01', SYSDATE,'TEST02');
SELECT * FROM EMPS;
ROLLBACK;

--------------------------------------------------------------------------------

COMMIT; --데이터를 실제로 반영함

--UPDATE문
SELECT * FROM EMPS;

UPDATE EMPS SET SALARY = SALARY * 1.1 WHERE EMPLOYEE_ID = 114;

-- ***** WHERE절 없이 구문을 실행시키면, 전체 테이블에 적용되기 때문에 항상 WHERE절을 붙어야 합니다.
-- 그래서 항상, SELECT문으로 업데이트할 값을 확인하고, 적용하는 습관을 길러라

-- 여러행 업데이트
SELECT * FROM EMPS;

UPDATE EMPS SET SALARY = SALARY * 1.1
    ,COMMISSION_PCT = 0.5
    ,MANAGER_ID = 110 WHERE EMPLOYEE_ID = 114;

-- UPDATE문의 서브쿼리절
--1ST
--여러컬럼을 한번에 업데이트 하는 구문
SELECT * FROM EMPS;


UPDATE EMPS SET (MANAGER_ID, JOB_ID, DEPARTMENT_ID) = (SELECT MANAGER_ID, JOB_ID, DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 201)
WHERE EMPLOYEE_ID = 114;
--각 컬럼을 서브쿼리로 업데이트 하는 구문
UPDATE EMPS SET MANAGER_ID = (SELECT MANAGER_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 201),
                JOB_ID = (SELECT JOB_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 201)
WHERE EMPLOYEE_ID = 114;

-- WHERE절에도 적용이 됩니다.
UPDATE EMPS
SET SALARY = 0 WHERE EMPLOYEE_ID IN (SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE JOB_ID = 'MK_MAN');

SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE JOB_ID = 'MK_MAN';

---------------------------------------------------------------------------
--DELETE문
--삭제하기 전에 꼭, SELECT문으로 삭제키워드를 확인하는 습관을 들이자 (꼭 PK값으로 지정하세요)
SELECT * FROM EMPS;

DELETE FROM EMPS WHERE EMPLOYEE_ID = 114;
 
DELETE FROM EMPS WHERE JOB_ID LIKE '%MAN'; 

--DELETE서브쿼리절

DELETE FROM EMPS WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM EMPS WHERE EMPLOYEE_ID = 145); -- 80번 부서
DROP TABLE EMPS;
ROLLBACK;
-----------------------------------------------
--DELETE문은 반드시 전부 지워지는 것은 아닙니다.
--테이블이 연관관계를 가지고 있으면, 참조무결성제약에 위배되는 경우, 지워지지 않습니다.
SELECT * FROM DEPARTMENTS;
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = 20;

DELETE FROM DEPARTMENTS WHERE DEPARTMENT_ID = 20; -- 20번 부서는 EMPLOYEE에 참초되고 있기 대문에 삭제되지 않습니다.


-----------------------------------------------
--MERGE문장 : 데이터가 있으면 UPDATE, 없으면 INSERT 문장을 수행하는, 병합구문
--1ST
SELECT * FROM EMPS;
UPDATE EMPS SET SALARY = 0;
DELETE FROM EMPS WHERE JOB_ID = 'SA_MAN';
MERGE INTO EMPS E1 --타겟 테이블
USING (SELECT * FROM EMPLOYEES WHERE JOB_ID LIKE '%MAN') E2 --병합할 서브쿼리
ON (E1.EMPLOYEE_ID = E2.EMPLOYEE_ID) --조인 조건
WHEN MATCHED THEN 
UPDATE SET
    E1.SALARY = E2.SALARY,
    E1.COMMISSION_PCT = E2.COMMISSION_PCT
WHEN NOT MATCHED THEN 
INSERT (EMPLOYEE_ID, LAST_NAME, EMAIL, HIRE_DATE, JOB_ID) 
VALUES (E2.EMPLOYEE_ID, E2.LAST_NAME, E2.EMAIL, E2.HIRE_DATE, E2.JOB_ID);

--2ND - 서브쿼리 절로 다른 테이블을 가져오는 것이 아니라, 직접 값을 넣고자 할 때 사용할 수 있습니다.
MERGE INTO EMPS E1 -- 타겟 테이블
USING DUAL
ON (E1.EMPLOYEE_ID = 200) -- 이런경우에 ON절은 고유한 키가 연결조건이 되어야 합니다.
WHEN MATCHED THEN
UPDATE SET 
E1.SALARY = 10000,
E1.HIRE_DATE = SYSDATE,
E1.COMMISSION_PCT = 0.1
WHEN NOT MATCHED THEN
INSERT (EMPLOYEE_ID, LAST_NAME, EMAIL, HIRE_DATE, JOB_ID) 
VALUES (200, 'TEST', 'TEST', SYSDATE, 'TEST');

-----------------------------------------------------------
--CTAS (CREATE TABLE AS SELECT) - 테이블 복사(많이 사용되진 X)
CREATE TABLE EMPS2 AS (SELECT * FROM EMPS); -- EMPS데이터를 전부 복사해서 EMPS2를 생성
SELECT * FROM EMPS2;
DROP TABLE EMPS2; --테이블 삭제
CREATE TABLE EMPS2 AS (SELECT * FROM EMPS WHERE 1 = 2); --EMPS데이블 구조만 복사해서 생성


